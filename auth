<!DOCTYPE html>
<html lang="en" data-theme="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Safvacut - Secure Crypto Authentication</title>
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Orbitron:wght@400;500;600;700;800&display=swap"
    rel="stylesheet">

  <!-- Firebase SDK -->
  <script type="module">
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
    import {
      getAuth,
      createUserWithEmailAndPassword,
      signInWithEmailAndPassword,
      signInWithPopup,
      GoogleAuthProvider,
      TwitterAuthProvider,
      OAuthProvider,
      updateProfile,
      sendPasswordResetEmail,
      onAuthStateChanged,
      signOut
    } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';
    import {
      getFirestore,
      doc,
      setDoc,
      getDoc,
      serverTimestamp
    } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';

    // Firebase configuration
    const firebaseConfig = {
      apiKey: "AIzaSyBxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
      authDomain: "safvacut-crypto.firebaseapp.com",
      projectId: "safvacut-crypto",
      storageBucket: "safvacut-crypto.appspot.com",
      messagingSenderId: "123456789012",
      appId: "1:123456789012:web:abcdefghijklmnopqr",
      measurementId: "G-XXXXXXXXXX"
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    // Auth providers
    const googleProvider = new GoogleAuthProvider();
    const twitterProvider = new TwitterAuthProvider();
    const appleProvider = new OAuthProvider('apple.com');

    // Configure providers
    googleProvider.addScope('email');
    googleProvider.addScope('profile');

    appleProvider.addScope('email');
    appleProvider.addScope('name');

    // Make Firebase available globally
    window.firebaseAuth = {
      auth,
      db,
      createUserWithEmailAndPassword,
      signInWithEmailAndPassword,
      signInWithPopup,
      googleProvider,
      twitterProvider,
      appleProvider,
      updateProfile,
      sendPasswordResetEmail,
      onAuthStateChanged,
      signOut,
      doc,
      setDoc,
      getDoc,
      serverTimestamp
    };
  </script>

  <style>
    /* CSS Custom Properties for Theme Management */
    :root {
      /* Light Theme Colors */
      --bg-primary: #ffffff;
      --bg-secondary: #f8fafc;
      --bg-tertiary: #f1f5f9;
      --bg-card: rgba(255, 255, 255, 0.9);
      --bg-glass: rgba(255, 255, 255, 0.1);

      --text-primary: #1e293b;
      --text-secondary: #64748b;
      --text-muted: #94a3b8;
      --text-inverse: #ffffff;

      --border-color: rgba(148, 163, 184, 0.2);
      --border-hover: rgba(148, 163, 184, 0.4);

      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
      --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);

      /* Brand Colors */
      --primary-500: #f97316;
      --primary-600: #ea580c;

      --success-color: #10b981;
      --warning-color: #f59e0b;
      --error-color: #ef4444;

      /* Gradients */
      --gradient-primary: linear-gradient(135deg, var(--primary-500) 0%, var(--primary-600) 100%);
      --gradient-bg: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);

      /* Spacing */
      --space-xs: 0.25rem;
      --space-sm: 0.5rem;
      --space-md: 1rem;
      --space-lg: 1.5rem;
      --space-xl: 2rem;
      --space-2xl: 3rem;
      --space-3xl: 4rem;

      /* Border Radius */
      --radius-sm: 0.375rem;
      --radius-md: 0.5rem;
      --radius-lg: 0.75rem;
      --radius-xl: 1rem;
      --radius-2xl: 1.5rem;
      --radius-full: 9999px;

      /* Transitions */
      --transition-fast: 150ms ease-in-out;
      --transition-normal: 250ms ease-in-out;
      --transition-slow: 350ms ease-in-out;

      /* Typography */
      --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      --font-mono: 'Orbitron', 'SF Mono', Monaco, 'Cascadia Code', monospace;

      --text-xs: 0.75rem;
      --text-sm: 0.875rem;
      --text-base: 1rem;
      --text-lg: 1.125rem;
      --text-xl: 1.25rem;
      --text-2xl: 1.5rem;
      --text-3xl: 1.875rem;
      --text-4xl: 2.25rem;
    }

    /* Dark Theme */
    [data-theme="dark"] {
      --bg-primary: #0f172a;
      --bg-secondary: #1e293b;
      --bg-tertiary: #334155;
      --bg-card: rgba(30, 41, 59, 0.9);
      --bg-glass: rgba(255, 255, 255, 0.05);

      --text-primary: #f8fafc;
      --text-secondary: #cbd5e1;
      --text-muted: #94a3b8;
      --text-inverse: #1e293b;

      --border-color: rgba(148, 163, 184, 0.1);
      --border-hover: rgba(148, 163, 184, 0.2);

      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.3);
      --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2);
      --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.4), 0 10px 10px -5px rgba(0, 0, 0, 0.2);

      --gradient-bg: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
    }

    [data-theme="light"] {
      --bg-primary: #ffffff;
      --bg-secondary: #f8fafc;
      --bg-tertiary: #f1f5f9;
      --bg-card: rgba(255, 255, 255, 0.9);
      --bg-glass: rgba(255, 255, 255, 0.1);

      --text-primary: #1e293b;
      --text-secondary: #64748b;
      --text-muted: #94a3b8;
      --text-inverse: #ffffff;

      --border-color: rgba(148, 163, 184, 0.2);
      --border-hover: rgba(148, 163, 184, 0.4);

      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
      --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);

      --gradient-bg: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
    }


    /* Reset and Base Styles */
    *,
    *::before,
    *::after {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html {
      font-size: 16px;
    }

    body {
      font-family: var(--font-sans);
      background: var(--gradient-bg);
      color: var(--text-primary);
      line-height: 1.6;
      overflow-x: hidden;
      transition: background-color var(--transition-normal), color var(--transition-normal);
    }

    /* Enhanced Scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
    }

    ::-webkit-scrollbar-track {
      background: var(--bg-secondary);
    }

    ::-webkit-scrollbar-thumb {
      background: var(--primary-500);
      border-radius: var(--radius-full);
    }

    ::-webkit-scrollbar-thumb:hover {
      background: var(--primary-600);
    }

    /* Auth Container */
    .auth-container {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: var(--space-xl) var(--space-md);
      position: relative;
      overflow: hidden;
    }

    .auth-container::before {
      content: '';
      position: absolute;
      inset: 0;
      background:
        radial-gradient(circle at 30% 20%, rgba(247, 147, 30, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 70% 80%, rgba(59, 130, 246, 0.1) 0%, transparent 50%);
      z-index: -1;
    }

    /* Auth Card */
    .auth-card {
      width: 100%;
      max-width: 450px;
      background: var(--bg-card);
      backdrop-filter: blur(20px);
      border: 1px solid var(--border-color);
      border-radius: var(--radius-2xl);
      padding: var(--space-2xl);
      box-shadow: var(--shadow-xl);
      transition: all var(--transition-normal);
      position: relative;
      overflow: hidden;
    }

    .auth-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, var(--bg-glass), transparent);
      transition: left 0.5s;
    }

    .auth-card:hover::before {
      left: 100%;
    }

    /* Auth Header */
    .auth-header {
      text-align: center;
      margin-bottom: var(--space-xl);
    }

    .auth-logo {
      width: 80px;
      height: 80px;
      margin: 0 auto var(--space-lg);
      border-radius: var(--radius-xl);
      filter: drop-shadow(0 0 20px rgba(247, 147, 30, 0.3));
    }

    .auth-title {
      font-family: var(--font-mono);
      font-size: var(--text-2xl);
      font-weight: 700;
      margin-bottom: var(--space-sm);
      background: var(--gradient-primary);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .auth-subtitle {
      color: var(--text-secondary);
      font-size: var(--text-sm);
    }

    /* Auth Tabs */
    .auth-tabs {
      display: flex;
      margin-bottom: var(--space-xl);
      background: var(--bg-glass);
      border-radius: var(--radius-lg);
      padding: var(--space-xs);
      border: 1px solid var(--border-color);
    }

    .auth-tab {
      flex: 1;
      text-align: center;
      padding: var(--space-md);
      cursor: pointer;
      color: var(--text-secondary);
      font-weight: 600;
      border-radius: var(--radius-md);
      transition: all var(--transition-fast);
    }

    .auth-tab.active {
      color: var(--text-primary);
      background: var(--bg-card);
      box-shadow: var(--shadow-sm);
    }

    /* Form Styles */
    .form-tab {
      display: none;
    }

    .form-tab.active {
      display: block;
    }

    .form-group {
      margin-bottom: var(--space-lg);
    }

    .form-label {
      display: block;
      margin-bottom: var(--space-sm);
      font-weight: 500;
      color: var(--text-primary);
      font-size: var(--text-sm);
    }

    .form-input-group {
      position: relative;
    }

    .form-input {
      width: 100%;
      padding: var(--space-md);
      border-radius: var(--radius-lg);
      border: 1px solid var(--border-color);
      background: var(--bg-glass);
      color: var(--text-primary);
      font-family: inherit;
      font-size: var(--text-base);
      transition: all var(--transition-fast);
    }

    .form-input:focus {
      outline: none;
      border-color: var(--primary-500);
      box-shadow: 0 0 0 3px rgba(247, 147, 30, 0.1);
    }

    .form-input::placeholder {
      color: var(--text-muted);
    }

    .form-input-icon {
      position: absolute;
      top: 50%;
      right: var(--space-md);
      transform: translateY(-50%);
      color: var(--text-secondary);
      cursor: pointer;
      transition: color var(--transition-fast);
    }

    .form-input-icon:hover {
      color: var(--primary-500);
    }

    /* Error Message */
    .error-message {
      color: var(--error-color);
      font-size: var(--text-sm);
      margin-top: var(--space-sm);
      display: none;
    }

    .error-message.show {
      display: block;
    }

    /* Success Message */
    .success-message {
      color: var(--success-color);
      font-size: var(--text-sm);
      margin-top: var(--space-sm);
      display: none;
    }

    .success-message.show {
      display: block;
    }

    /* Checkbox */
    .form-check {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      margin-bottom: var(--space-lg);
    }

    .form-check-input {
      width: 18px;
      height: 18px;
      border-radius: var(--radius-sm);
      border: 1px solid var(--border-color);
      background: var(--bg-glass);
      cursor: pointer;
      appearance: none;
      -webkit-appearance: none;
      transition: all var(--transition-fast);
      position: relative;
    }

    .form-check-input:checked {
      background-color: var(--primary-500);
      border-color: var(--primary-500);
    }

    .form-check-input:checked::after {
      content: '✓';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
      font-size: 12px;
      font-weight: bold;
    }

    .form-check-label {
      cursor: pointer;
      user-select: none;
      color: var(--text-secondary);
      font-size: var(--text-sm);
    }

    .form-check-label a {
      color: var(--primary-500);
      text-decoration: none;
    }

    .form-check-label a:hover {
      text-decoration: underline;
    }

    /* Auth Button */
    .auth-btn {
      width: 100%;
      padding: var(--space-md);
      border-radius: var(--radius-lg);
      background: var(--gradient-primary);
      color: var(--text-inverse);
      font-weight: 600;
      font-size: var(--text-base);
      cursor: pointer;
      border: none;
      transition: all var(--transition-fast);
      position: relative;
      overflow: hidden;
    }

    .auth-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    .auth-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s;
    }

    .auth-btn:hover:not(:disabled)::before {
      left: 100%;
    }

    .auth-btn:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: var(--shadow-lg);
    }

    .auth-btn:active:not(:disabled) {
      transform: translateY(0);
    }

    /* Divider */
    .auth-divider {
      display: flex;
      align-items: center;
      margin: var(--space-xl) 0;
      color: var(--text-secondary);
      font-size: var(--text-sm);
    }

    .auth-divider::before,
    .auth-divider::after {
      content: '';
      flex: 1;
      height: 1px;
      background: var(--border-color);
    }

    .auth-divider::before {
      margin-right: var(--space-md);
    }

    .auth-divider::after {
      margin-left: var(--space-md);
    }

    /* Social Auth */
    .social-auth {
      display: flex;
      gap: var(--space-md);
      justify-content: center;
      margin-bottom: var(--space-xl);
    }

    .social-auth-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 50px;
      height: 50px;
      border-radius: var(--radius-full);
      background: var(--bg-glass);
      border: 1px solid var(--border-color);
      cursor: pointer;
      color: var(--text-primary);
      transition: all var(--transition-fast);
    }

    .social-auth-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    .social-auth-btn:hover:not(:disabled) {
      background: var(--primary-500);
      color: var(--text-inverse);
      transform: translateY(-2px);
      border-color: var(--primary-500);
    }

    /* Auth Footer */
    .auth-footer {
      text-align: center;
      margin-top: var(--space-xl);
      color: var(--text-secondary);
      font-size: var(--text-sm);
    }

    .auth-footer a {
      color: var(--primary-500);
      font-weight: 600;
      text-decoration: none;
      cursor: pointer;
    }

    .auth-footer a:hover {
      text-decoration: underline;
    }

    /* Navigation */
    .auth-back {
      position: fixed;
      top: var(--space-xl);
      left: var(--space-xl);
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      color: var(--text-secondary);
      font-weight: 500;
      text-decoration: none;
      transition: all var(--transition-fast);
      z-index: 100;
      padding: var(--space-sm) var(--space-md);
      border-radius: var(--radius-lg);
      background: var(--bg-glass);
      backdrop-filter: blur(10px);
      border: 1px solid var(--border-color);
    }

    .auth-back:hover {
      color: var(--primary-500);
      transform: translateX(-4px);
      border-color: var(--primary-500);
    }

    .theme-toggle {
      position: fixed;
      top: var(--space-xl);
      right: var(--space-xl);
      display: flex;
      align-items: center;
      justify-content: center;
      width: 50px;
      height: 50px;
      background: var(--bg-glass);
      backdrop-filter: blur(10px);
      border: 1px solid var(--border-color);
      border-radius: var(--radius-full);
      color: var(--text-primary);
      cursor: pointer;
      transition: all var(--transition-fast);
      z-index: 100;
    }

    .theme-toggle:hover {
      background: var(--primary-500);
      color: var(--text-inverse);
      transform: scale(1.1);
      border-color: var(--primary-500);
    }

    /* Loading Screen */
    .loading {
      position: fixed;
      inset: 0;
      background: var(--bg-primary);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      transition: opacity 0.5s, visibility 0.5s;
    }

    .loading.hidden {
      opacity: 0;
      visibility: hidden;
    }

    .loading-content {
      text-align: center;
    }

    .loading-spinner {
      width: 60px;
      height: 60px;
      border: 4px solid var(--border-color);
      border-top: 4px solid var(--primary-500);
      border-radius: var(--radius-full);
      animation: spin 1s linear infinite;
      margin: 0 auto var(--space-xl);
    }

    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }

    .loading-text {
      font-family: var(--font-mono);
      font-size: var(--text-3xl);
      font-weight: 700;
      color: var(--primary-500);
      margin-bottom: var(--space-lg);
    }

    .loading-subtitle {
      color: var(--text-secondary);
      font-size: var(--text-base);
    }

    /* Animations */
    @keyframes slideInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .animate-slide-up {
      animation: slideInUp 0.8s ease-out;
    }

    /* Responsive Design */
    @media (max-width: 640px) {
      .auth-container {
        padding: var(--space-lg) var(--space-md);
      }

      .auth-card {
        padding: var(--space-xl) var(--space-lg);
      }

      .auth-back,
      .theme-toggle {
        top: var(--space-lg);
      }

      .auth-back {
        left: var(--space-lg);
      }

      .theme-toggle {
        right: var(--space-lg);
      }

      .auth-logo {
        width: 60px;
        height: 60px;
      }

      .auth-title {
        font-size: var(--text-xl);
      }
    }

    @media (max-width: 480px) {
      .auth-container {
        padding: var(--space-md);
      }

      .auth-card {
        padding: var(--space-lg);
      }

      .auth-back,
      .theme-toggle {
        top: var(--space-md);
      }

      .auth-back {
        left: var(--space-md);
      }

      .theme-toggle {
        right: var(--space-md);
      }
    }

    /* Focus States for Accessibility */
    button:focus,
    a:focus,
    input:focus,
    select:focus,
    textarea:focus {
      outline: 2px solid var(--primary-500);
      outline-offset: 2px;
    }

    /* Reduced Motion */
    @media (prefers-reduced-motion: reduce) {

      *,
      *::before,
      *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }
    }
  </style>
</head>

<body data-theme="dark">
  <!-- Loading Screen -->
  <div class="loading" id="loading">
    <div class="loading-content">
      <div class="loading-spinner"></div>
      <div class="loading-text">SAFVACUT</div>
      <div class="loading-subtitle">Loading your secure crypto experience...</div>
    </div>
  </div>

  <!-- Auth Container -->
  <div class="auth-container">
    <a href="./index.html" class="auth-back">
      <i class="fas fa-arrow-left"></i>
      <span>Back to Home</span>
    </a>

    <button id="themeToggle" class="theme-toggle" aria-label="Toggle theme">
      <i class="fas fa-sun" id="themeIcon"></i>
    </button>

    <div class="auth-card animate-slide-up">
      <div class="auth-header">
        <img src="mainl-logo.png" alt="Safvacut Logo" class="auth-logo">
        <style>
          .auth-logo {
            width: 100px;
            max-width: 40%;
            height: auto;
            margin: 0 auto 1rem;
            display: block;
            object-fit: contain;
          }

          @media (max-width: 480px) {
            .auth-logo {
              width: 80px;
              max-width: 60%;
            }
          }
        </style>
        <h1 class="auth-title">Welcome to Safvacut</h1>
        <p class="auth-subtitle">Your secure gateway to cryptocurrency</p>
      </div>

      <div class="auth-tabs">
        <div class="auth-tab active" id="tab-login">Login</div>
        <div class="auth-tab" id="tab-register">Register</div>
      </div>

      <!-- Login Form -->
      <form class="form-tab active" id="form-login">
        <div class="form-group">
          <label class="form-label" for="login-email">Email Address</label>
          <input type="email" id="login-email" class="form-input" placeholder="your@email.com" required>
          <div class="error-message" id="login-email-error"></div>
        </div>

        <div class="form-group">
          <label class="form-label" for="login-password">Password</label>
          <div class="form-input-group">
            <input type="password" id="login-password" class="form-input" placeholder="••••••••••" required>
            <span class="form-input-icon toggle-password" data-for="login-password">
              <i class="fas fa-eye"></i>
            </span>
          </div>
          <div class="error-message" id="login-password-error"></div>
        </div>

        <div class="form-check">
          <input type="checkbox" id="remember-me" class="form-check-input">
          <label for="remember-me" class="form-check-label">Remember me</label>
        </div>

        <div class="error-message" id="login-form-error"></div>

        <div class="auth-action">
          <button type="submit" class="auth-btn" id="login-btn">Sign In</button>
        </div>

        <div class="auth-footer">
          <p>Forgot your password? <a href="#" id="forgot-password-link">Reset now</a></p>
        </div>
      </form>

      <!-- Register Form -->
      <form class="form-tab" id="form-register">
        <div class="form-group">
          <label class="form-label" for="register-name">Full Name</label>
          <input type="text" id="register-name" class="form-input" placeholder="John Doe" required>
          <div class="error-message" id="register-name-error"></div>
        </div>

        <div class="form-group">
          <label class="form-label" for="register-email">Email Address</label>
          <input type="email" id="register-email" class="form-input" placeholder="your@email.com" required>
          <div class="error-message" id="register-email-error"></div>
        </div>

        <div class="form-group">
          <label class="form-label" for="register-password">Password</label>
          <div class="form-input-group">
            <input type="password" id="register-password" class="form-input" placeholder="••••••••••" required>
            <span class="form-input-icon toggle-password" data-for="register-password">
              <i class="fas fa-eye"></i>
            </span>
          </div>
          <div class="error-message" id="register-password-error"></div>
        </div>

        <div class="form-group">
          <label class="form-label" for="confirm-password">Confirm Password</label>
          <div class="form-input-group">
            <input type="password" id="confirm-password" class="form-input" placeholder="••••••••••" required>
            <span class="form-input-icon toggle-password" data-for="confirm-password">
              <i class="fas fa-eye"></i>
            </span>
          </div>
          <div class="error-message" id="confirm-password-error"></div>
        </div>

        <div class="form-check">
          <input type="checkbox" id="terms-agree" class="form-check-input" required>
          <label for="terms-agree" class="form-check-label">I agree to the <a href="#">Terms of Service</a> and <a
              href="#">Privacy Policy</a></label>
        </div>

        <div class="error-message" id="register-form-error"></div>
        <div class="success-message" id="register-form-success"></div>

        <div class="auth-action">
          <button type="submit" class="auth-btn" id="register-btn">Create Account</button>
        </div>
      </form>

      <div class="auth-divider">OR</div>

      <div class="social-auth">
        <button type="button" class="social-auth-btn" id="google-auth-btn" aria-label="Sign in with Google">
          <i class="fab fa-google"></i>
        </button>
        <button type="button" class="social-auth-btn" id="apple-auth-btn" aria-label="Sign in with Apple">
          <i class="fab fa-apple"></i>
        </button>
        <button type="button" class="social-auth-btn" id="twitter-auth-btn" aria-label="Sign in with Twitter">
          <i class="fab fa-twitter"></i>
        </button>
      </div>
    </div>
  </div>

  <script>
    // Wait for Firebase to load
    window.addEventListener('load', function () {
      setTimeout(initializeAuth, 100);
    });

    function initializeAuth() {
      // Check if Firebase is loaded
      if (!window.firebaseAuth) {
        console.error('Firebase not loaded');
        return;
      }

      const {
        auth,
        db,
        createUserWithEmailAndPassword,
        signInWithEmailAndPassword,
        signInWithPopup,
        googleProvider,
        twitterProvider,
        appleProvider,
        updateProfile,
        sendPasswordResetEmail,
        onAuthStateChanged,
        signOut,
        doc,
        setDoc,
        getDoc,
        serverTimestamp
      } = window.firebaseAuth;

      // Theme Management
      const themeToggle = document.getElementById('themeToggle');
      const themeIcon = document.getElementById('themeIcon');
      const body = document.body;

      // Load saved theme or default to dark
      const savedTheme = localStorage.getItem('theme') || 'dark';
      body.setAttribute('data-theme', savedTheme);
      updateThemeIcon(savedTheme);

      themeToggle.addEventListener('click', () => {
        const currentTheme = body.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

        body.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        updateThemeIcon(newTheme);
      });

      function updateThemeIcon(theme) {
        themeIcon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
      }

      // Loading Screen
      setTimeout(() => {
        document.getElementById('loading').classList.add('hidden');
      }, 1000);

      // Auth State Observer
      onAuthStateChanged(auth, (user) => {
        if (user) {
          console.log('User is signed in:', user);
          // Redirect to dashboard if user is already authenticated
          window.location.href = './dashboard.html';
        } else {
          console.log('User is signed out');
        }
      });

      // Tab switching functionality
      const tabLogin = document.getElementById('tab-login');
      const tabRegister = document.getElementById('tab-register');
      const formLogin = document.getElementById('form-login');
      const formRegister = document.getElementById('form-register');

      tabLogin.addEventListener('click', function () {
        tabLogin.classList.add('active');
        tabRegister.classList.remove('active');
        formLogin.classList.add('active');
        formRegister.classList.remove('active');
        clearErrors();
      });

      tabRegister.addEventListener('click', function () {
        tabRegister.classList.add('active');
        tabLogin.classList.remove('active');
        formRegister.classList.add('active');
        formLogin.classList.remove('active');
        clearErrors();
      });

      // Password visibility toggle
      document.querySelectorAll('.toggle-password').forEach(function (toggle) {
        toggle.addEventListener('click', function () {
          const inputId = this.getAttribute('data-for');
          const input = document.getElementById(inputId);

          if (input.type === 'password') {
            input.type = 'text';
            this.innerHTML = '<i class="fas fa-eye-slash"></i>';
          } else {
            input.type = 'password';
            this.innerHTML = '<i class="fas fa-eye"></i>';
          }
        });
      });

      // Utility functions
      function showError(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
          errorElement.textContent = message;
          errorElement.classList.add('show');
        }
      }

      function showSuccess(elementId, message) {
        const successElement = document.getElementById(elementId);
        if (successElement) {
          successElement.textContent = message;
          successElement.classList.add('show');
        }
      }

      function clearErrors() {
        document.querySelectorAll('.error-message, .success-message').forEach(el => {
          el.classList.remove('show');
          el.textContent = '';
        });
      }

      function setButtonLoading(button, isLoading, loadingText) {
        if (isLoading) {
          button.dataset.originalText = button.textContent;
          button.innerHTML = `<i class="fas fa-spinner fa-spin"></i> ${loadingText}`;
          button.disabled = true;
        } else {
          button.innerHTML = button.dataset.originalText || button.textContent;
          button.disabled = false;
        }
      }

      function getFirebaseErrorMessage(errorCode) {
        const errorMessages = {
          'auth/user-not-found': 'No account found with this email address.',
          'auth/wrong-password': 'Incorrect password. Please try again.',
          'auth/email-already-in-use': 'An account with this email already exists.',
          'auth/weak-password': 'Password should be at least 6 characters long.',
          'auth/invalid-email': 'Please enter a valid email address.',
          'auth/user-disabled': 'This account has been disabled.',
          'auth/too-many-requests': 'Too many failed attempts. Please try again later.',
          'auth/network-request-failed': 'Network error. Please check your connection.',
          'auth/popup-closed-by-user': 'Sign-in popup was closed before completion.',
          'auth/cancelled-popup-request': 'Sign-in was cancelled.',
          'auth/popup-blocked': 'Sign-in popup was blocked by the browser.'
        };
        return errorMessages[errorCode] || 'An unexpected error occurred. Please try again.';
      }

      // Create user profile in Firestore
      async function createUserProfile(user, additionalData = {}) {
        try {
          const userRef = doc(db, 'users', user.uid);
          const userDoc = await getDoc(userRef);

          if (!userDoc.exists()) {
            const { displayName, email, photoURL } = user;
            const createdAt = serverTimestamp();

            await setDoc(userRef, {
              displayName,
              email,
              photoURL,
              createdAt,
              ...additionalData
            });
          }

          return userRef;
        } catch (error) {
          console.error('Error creating user profile:', error);
          throw error;
        }
      }

      // Login Form Handler
      document.getElementById('form-login').addEventListener('submit', async function (e) {
        e.preventDefault();
        clearErrors();

        const email = document.getElementById('login-email').value.trim();
        const password = document.getElementById('login-password').value;
        const loginBtn = document.getElementById('login-btn');

        if (!email || !password) {
          showError('login-form-error', 'Please fill in all fields.');
          return;
        }

        setButtonLoading(loginBtn, true, 'Signing In...');

        try {
          const userCredential = await signInWithEmailAndPassword(auth, email, password);
          const user = userCredential.user;

          // Create or update user profile
          await createUserProfile(user);

          // Redirect to dashboard
          window.location.href = './dashboard.html';
        } catch (error) {
          console.error('Login error:', error);
          showError('login-form-error', getFirebaseErrorMessage(error.code));
        } finally {
          setButtonLoading(loginBtn, false);
        }
      });

      // Register Form Handler
      document.getElementById('form-register').addEventListener('submit', async function (e) {
        e.preventDefault();
        clearErrors();

        const name = document.getElementById('register-name').value.trim();
        const email = document.getElementById('register-email').value.trim();
        const password = document.getElementById('register-password').value;
        const confirmPassword = document.getElementById('confirm-password').value;
        const termsAgreed = document.getElementById('terms-agree').checked;
        const registerBtn = document.getElementById('register-btn');

        // Validation
        if (!name) {
          showError('register-name-error', 'Please enter your full name.');
          return;
        }

        if (!email) {
          showError('register-email-error', 'Please enter your email address.');
          return;
        }

        if (!password) {
          showError('register-password-error', 'Please enter a password.');
          return;
        }

        if (password.length < 6) {
          showError('register-password-error', 'Password must be at least 6 characters long.');
          return;
        }

        if (password !== confirmPassword) {
          showError('confirm-password-error', 'Passwords do not match.');
          return;
        }

        if (!termsAgreed) {
          showError('register-form-error', 'Please agree to the Terms of Service and Privacy Policy.');
          return;
        }

        setButtonLoading(registerBtn, true, 'Creating Account...');

        try {
          const userCredential = await createUserWithEmailAndPassword(auth, email, password);
          const user = userCredential.user;

          // Update user profile with display name
          await updateProfile(user, {
            displayName: name
          });

          // Create user profile in Firestore
          await createUserProfile(user, {
            displayName: name,
            accountType: 'email'
          });

          showSuccess('register-form-success', 'Account created successfully! Redirecting...');

          // Redirect to dashboard after a short delay
          setTimeout(() => {
            window.location.href = './dashboard.html';
          }, 2000);

        } catch (error) {
          console.error('Registration error:', error);
          showError('register-form-error', getFirebaseErrorMessage(error.code));
        } finally {
          setButtonLoading(registerBtn, false);
        }
      });

      // Social Authentication Handlers
      async function handleSocialAuth(provider, providerName) {
        clearErrors();

        try {
          const result = await signInWithPopup(auth, provider);
          const user = result.user;

          // Create user profile in Firestore
          await createUserProfile(user, {
            accountType: providerName.toLowerCase()
          });

          // Redirect to dashboard
          window.location.href = './dashboard.html';

        } catch (error) {
          console.error(`${providerName} auth error:`, error);
          showError('login-form-error', getFirebaseErrorMessage(error.code));
        }
      }

      // Google Auth
      document.getElementById('google-auth-btn').addEventListener('click', function () {
        const originalHTML = this.innerHTML;
        this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        this.disabled = true;

        handleSocialAuth(googleProvider, 'Google').finally(() => {
          this.innerHTML = originalHTML;
          this.disabled = false;
        });
      });

      // Apple Auth
      document.getElementById('apple-auth-btn').addEventListener('click', function () {
        const originalHTML = this.innerHTML;
        this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        this.disabled = true;

        handleSocialAuth(appleProvider, 'Apple').finally(() => {
          this.innerHTML = originalHTML;
          this.disabled = false;
        });
      });

      // Twitter Auth
      document.getElementById('twitter-auth-btn').addEventListener('click', function () {
        const originalHTML = this.innerHTML;
        this.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        this.disabled = true;

        handleSocialAuth(twitterProvider, 'Twitter').finally(() => {
          this.innerHTML = originalHTML;
          this.disabled = false;
        });
      });

      // Forgot Password Handler
      document.getElementById('forgot-password-link').addEventListener('click', async function (e) {
        e.preventDefault();

        const email = document.getElementById('login-email').value.trim();

        if (!email) {
          showError('login-email-error', 'Please enter your email address first.');
          return;
        }

        try {
          await sendPasswordResetEmail(auth, email);
          showSuccess('login-form-error', 'Password reset email sent! Check your inbox.');
        } catch (error) {
          console.error('Password reset error:', error);
          showError('login-form-error', getFirebaseErrorMessage(error.code));
        }
      });

      // Add ripple effect to buttons
      document.querySelectorAll('.auth-btn, .social-auth-btn, .auth-tab').forEach(element => {
        element.addEventListener('click', function (e) {
          const ripple = document.createElement('span');
          const rect = this.getBoundingClientRect();
          const size = Math.max(rect.width, rect.height);
          const x = e.clientX - rect.left - size / 2;
          const y = e.clientY - rect.top - size / 2;

          ripple.style.cssText = `
            position: absolute;
            width: ${size}px;
            height: ${size}px;
            left: ${x}px;
            top: ${y}px;
            background: rgba(247, 147, 30, 0.3);
            border-radius: 50%;
            transform: scale(0);
            animation: ripple 0.6s linear;
            pointer-events: none;
          `;

          this.style.position = 'relative';
          this.style.overflow = 'hidden';
          this.appendChild(ripple);

          setTimeout(() => {
            ripple.remove();
          }, 600);
        });
      });

      // Add ripple animation
      const style = document.createElement('style');
      style.textContent = `
        @keyframes ripple {
          to {
            transform: scale(4);
            opacity: 0;
          }
        }
      `;
      document.head.appendChild(style);

      // Form validation enhancements
      document.querySelectorAll('.form-input').forEach(input => {
        input.addEventListener('blur', function () {
          if (this.checkValidity()) {
            this.style.borderColor = 'var(--success-color)';
          } else {
            this.style.borderColor = 'var(--error-color)';
          }
        });

        input.addEventListener('input', function () {
          this.style.borderColor = 'var(--border-color)';
          // Clear related error messages
          const errorId = this.id + '-error';
          const errorElement = document.getElementById(errorId);
          if (errorElement) {
            errorElement.classList.remove('show');
          }
        });
      });

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && e.target.classList.contains('auth-tab')) {
          e.target.click();
        }
      });
    }
  </script>
</body>

</html>
